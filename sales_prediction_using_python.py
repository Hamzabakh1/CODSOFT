# -*- coding: utf-8 -*-
"""SALES PREDICTION USING PYTHON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l0mld57-xACnHsRagSl_T2ToqRf_jgSs
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Supress Warnings
import warnings
warnings.filterwarnings('ignore')

# Read the file
advertising = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/advertising.csv")

# Check the shape of the DataFrame (rows, columns)
print(advertising.shape)

# Let's see the statistical details of the dataframe
print(advertising.describe())

# Checking Null values
print(advertising.isnull().sum()*100/advertising.shape[0])

# Outlier Analysis
fig, axs = plt.subplots(3, figsize = (10,10))
plt1 = sns.boxplot(advertising['TV'], ax = axs[0])
plt1.set_title('Boxplot for TV')

plt2 = sns.boxplot(advertising['Radio'], ax = axs[1])
plt2.set_title('Boxplot for Radio')

plt3 = sns.boxplot(advertising['Newspaper'], ax = axs[2])
plt3.set_title('Boxplot for Newspaper')

plt.tight_layout()
plt.subplots_adjust(hspace = 0.5)
plt.show()

# Let's see how Sales are related with other variables using scatter plot.
sns.pairplot(advertising, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')
plt.show()

# Let's see the correlation between different variables.
sns.heatmap(advertising.corr(), cmap="YlGnBu", annot = True)
plt.show()

# Create a feature DataFrame
X = advertising[['TV', 'Radio', 'Newspaper']]

# Create a target DataFrame
y = advertising['Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Output the coefficients
print('Intercept:', model.intercept_)
print('Coefficients:', model.coef_)

# Compare actual output values with predicted values
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(df)